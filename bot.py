# -*- coding: utf-8 -*-

import logging
import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command

API_TOKEN = '7580490630:AAGqUEnqe0h_-uWsq1NHfVDEBgROinSqGYY'
ADMIN_IDS = [8349596696, 587738183]  # –°–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–≤–∞—Ä–æ–≤: {id: {"name": str, "desc": str, "price": int, "currency": str, "content": str, "pay_url": str, "category": str}}
products = {}
product_id_counter = 1
user_states = {}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥")],
    [KeyboardButton(text="üßæ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")],
    [KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
])

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
    [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")],
    [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
])

currency_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
    [KeyboardButton(text="RUB"), KeyboardButton(text="USD"), KeyboardButton(text="EUR")]
])

add_done_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
])

def get_categories():
    return sorted(set(prod["category"] for prod in products.values()))

def get_category_kb():
    cats = get_categories()
    keyboard = [[KeyboardButton(text=cat)] for cat in cats]
    keyboard.append([KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")])
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

@router.message(Command("start"))
async def start(msg: types.Message):
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=main_kb)

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(msg: types.Message):
    cats = get_categories()
    if not cats:
        await msg.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return
    keyboard = [
        [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")]
        for cat in cats
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@router.callback_query(F.data.startswith("cat_"))
async def show_catalog(call: types.CallbackQuery):
    cat = call.data[4:]
    items = [ (pid, prod) for pid, prod in products.items() if prod["category"] == cat ]
    if not items:
        await call.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await call.answer()
        return
    text = f"üõí <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}</b>\n\n"
    keyboard = [
        [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å: {prod['name']}", callback_data=f"buy_{pid}")]
        for pid, prod in items
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    for pid, prod in items:
        text += (
            f"üîπ <b>{prod['name']}</b>\n"
            f"üìù {prod['desc']}\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> {prod['price']} {prod['currency']}\n\n"
        )
    await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()

@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await msg.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    user_states[msg.from_user.id] = {"step": "category"}
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=get_category_kb())

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "category")
async def add_product_category(msg: types.Message):
    if msg.text == "‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        user_states[msg.from_user.id]["step"] = "new_category"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
        return
    cats = get_categories()
    if msg.text not in cats:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.", reply_markup=get_category_kb())
        return
    user_states[msg.from_user.id]["category"] = msg.text
    user_states[msg.from_user.id]["step"] = "name"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "new_category")
async def add_product_new_category(msg: types.Message):
    user_states[msg.from_user.id]["category"] = msg.text
    user_states[msg.from_user.id]["step"] = "name"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "name")
async def add_product_name(msg: types.Message):
    user_states[msg.from_user.id]["name"] = msg.text
    user_states[msg.from_user.id]["step"] = "desc"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "desc")
async def add_product_desc(msg: types.Message):
    user_states[msg.from_user.id]["desc"] = msg.text
    user_states[msg.from_user.id]["step"] = "currency"
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=currency_kb)

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "currency")
async def add_product_currency(msg: types.Message):
    currency = msg.text.upper()
    if currency not in ["RUB", "USD", "EUR"]:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=currency_kb)
        return
    user_states[msg.from_user.id]["currency"] = currency
    user_states[msg.from_user.id]["step"] = "price"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=types.ReplyKeyboardRemove())

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "price")
async def add_product_price(msg: types.Message):
    try:
        price = int(msg.text)
        user_states[msg.from_user.id]["price"] = price
        user_states[msg.from_user.id]["step"] = "content"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª—é—á, —Å—Å—ã–ª–∫—É –∏ —Ç.–¥.):")
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "content")
async def add_product_content(msg: types.Message):
    user_states[msg.from_user.id]["content"] = msg.text
    user_states[msg.from_user.id]["step"] = "pay_url"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ÆMoney, Qiwi, PayPal):")

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "pay_url")
async def add_product_pay_url(msg: types.Message):
    global product_id_counter
    state = user_states[msg.from_user.id]
    products[product_id_counter] = {
        "name": state["name"],
        "desc": state["desc"],
        "price": state["price"],
        "currency": state["currency"],
        "content": state["content"],
        "pay_url": msg.text,
        "category": state["category"]
    }
    save_products()
    await msg.answer(
        f"–¢–æ–≤–∞—Ä '{state['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=add_done_kb
    )
    product_id_counter += 1
    user_states.pop(msg.from_user.id)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä")
async def add_product_start_more(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    user_states[msg.from_user.id] = {"step": "category"}
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=get_category_kb())

@router.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(msg: types.Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back(msg: types.Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ ---
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def change_price_start(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if not products:
        await msg.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    keyboard = [
        [InlineKeyboardButton(text=f"{prod['name']} ({prod['category']})", callback_data=f"editprice_{pid}")]
        for pid, prod in products.items()
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=kb)

@router.callback_query(F.data.startswith("editprice_"))
async def change_price_choose(call: types.CallbackQuery):
    pid = int(call.data.split("_")[1])
    prod = products.get(pid)
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    user_states[call.from_user.id] = {"step": "edit_price", "pid": pid}
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{prod['name']}':")
    await call.answer()

@router.message(lambda m: m.from_user.id in ADMIN_IDS and user_states.get(m.from_user.id, {}).get("step") == "edit_price")
async def change_price_set(msg: types.Message):
    try:
        price = int(msg.text)
        pid = user_states[msg.from_user.id]["pid"]
        products[pid]["price"] = price
        save_products()
        await msg.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ '{products[pid]['name']}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} {products[pid]['currency']}.", reply_markup=admin_kb)
        user_states.pop(msg.from_user.id)
    except Exception:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if not products:
        await msg.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    keyboard = [
        [InlineKeyboardButton(text=f"{prod['name']} ({prod['category']})", callback_data=f"deltovar_{pid}")]
        for pid, prod in products.items()
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("deltovar_"))
async def delete_product_confirm(call: types.CallbackQuery):
    pid = int(call.data.split("_")[1])
    prod = products.get(pid)
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    del products[pid]
    save_products()
    await call.message.answer(f"–¢–æ–≤–∞—Ä '{prod['name']}' —É–¥–∞–ª—ë–Ω.", reply_markup=admin_kb)
    await call.answer("–£–¥–∞–ª–µ–Ω–æ.")

# --- –ü–æ–∫—É–ø–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
user_purchases = {}

@router.callback_query(F.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    pid = int(call.data.split("_")[1])
    prod = products.get(pid)
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await call.message.answer(
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ <b>{prod['name']}</b> ({prod['desc']}) –æ–ø–ª–∞—Ç–∏—Ç–µ {prod['price']} {prod['currency']} –ø–æ —Å—Å—ã–ª–∫–µ:\n{prod['pay_url']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
        parse_mode="HTML"
    )
    user_states[call.from_user.id] = {"waiting_payment": pid}
    await call.answer()

pending_payments = {}  # user_id: {"pid": int, "photo_id": str, "message_id": int}

@router.message(F.content_type == types.ContentType.PHOTO)
async def handle_payment_proof(msg: types.Message):
    state = user_states.get(msg.from_user.id)
    if state and "waiting_payment" in state:
        pid = state["waiting_payment"]
        prod = products.get(pid)
        if prod:
            pending_payments[msg.from_user.id] = {
                "pid": pid,
                "photo_id": msg.photo[-1].file_id,
                "message_id": msg.message_id
            }
            kb = InlineKeyboardMarkup()
            kb.add(
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{msg.from_user.id}_{pid}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{msg.from_user.id}_{pid}")
            )
            for admin_id in ADMIN_IDS:
                await bot.send_photo(
                    admin_id,
                    msg.photo[-1].file_id,
                    caption=(
                        f"–ü–æ—Å—Ç—É–ø–∏–ª —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É!\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{msg.from_user.username or msg.from_user.id}\n"
                        f"–¢–æ–≤–∞—Ä: {prod['name']} ({prod['desc']})\n"
                        f"–¶–µ–Ω–∞: {prod['price']} {prod['currency']}\n"
                        f"User ID: {msg.from_user.id}"
                    ),
                    reply_markup=kb
                )
            await msg.answer("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        else:
            await msg.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await msg.answer("–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–∫—É. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")

@router.callback_query(lambda c: c.data.startswith("approve_") or c.data.startswith("decline_"))
async def process_payment_decision(call: types.CallbackQuery):
    action, user_id, pid = call.data.split("_")
    user_id = int(user_id)
    pid = int(pid)
    prod = products.get(pid)
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if action == "approve":
        user_purchases.setdefault(user_id, []).append(prod)
        user_states.pop(user_id, None)
        pending_payments.pop(user_id, None)
        await bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n–í–æ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä:\n\n<code>{prod['content']}</code>",
            parse_mode="HTML"
        )
        try:
            await call.message.edit_caption(call.message.caption + "\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω.", reply_markup=None)
        except Exception:
            pass
        await call.answer("–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    elif action == "decline":
        user_states.pop(user_id, None)
        pending_payments.pop(user_id, None)
        await bot.send_message(
            user_id,
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
        try:
            await call.message.edit_caption(call.message.caption + "\n\n‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=None)
        except Exception:
            pass
        await call.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@router.message(F.text == "üßæ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
async def my_purchases(msg: types.Message):
    items = user_purchases.get(msg.from_user.id, [])
    if not items:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
        return
    text = "üßæ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
    for i, prod in enumerate(items, 1):
        text += f"{i}. <b>{prod['name']}</b> ({prod['desc']}) ‚Äî <code>{prod['content']}</code>\n"
    await msg.answer(text, parse_mode="HTML")

CATALOG_FILE = "products.json"

def save_products():
    with open(CATALOG_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)

def load_products():
    global products, product_id_counter
    if os.path.exists(CATALOG_FILE):
        with open(CATALOG_FILE, "r", encoding="utf-8") as f:
            loaded = json.load(f)
            products.update({int(k): v for k, v in loaded.items()})
        if products:
            product_id_counter = max(products.keys()) + 1

async def main():
    load_products()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())